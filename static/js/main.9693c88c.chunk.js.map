{"version":3,"sources":["components/Intro.js","components/PersonalData.js","components/KojimaData.js","engine/conditions.js","engine/generator.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","Jumbotron","Row","Col","href","target","rel","title","width","height","src","frameBorder","allow","allowFullScreen","Button","variant","block","onClick","start","PersonalData","e","this","onChange","name","value","Form","Group","controlId","Label","Control","type","size","handleChange","bind","Text","className","as","React","Component","determineNameConditions","dices","hasOneName","d6","hasTheMan","d4","hasBigMan","d8","hasOldMan","hasBodyCondition","isClone","d12","isHideoKojima","d100","category","d20Value","d20","categories","answers","originalName","diceRoll","personality","goodAt","nameSoundsLike","favoriteFilmCharacter","profession","stateOfMatter","zodiacSign","firstPet","intangibleFear","tangibleFear","embarassingStory","militaryHardware","names","kubrickWord","musicAlbum","scientificTerm","madsAction","stabbingObject","lastThing","generateKojimaName","conditions","concat","nameParts","finalName","slice","bodyCondition","addConditions","App","state","showForm","setState","answerKey","answerValue","diceSize","Math","floor","random","rollDice","randomDice","kojimaName","Container","saveAnswer","KojimaData","discoverName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VA8BeA,G,MAtBD,SAACC,GACX,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,qDACA,gMAE4E,uBAAGC,KAAK,qGAAqGC,OAAO,SAASC,IAAI,uBAAjI,gBAF5E,2BAKJ,kBAACH,EAAA,EAAD,KACI,2BACI,4BAAQI,MAAM,QAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAI,4CAA4CC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,OAI1N,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,OAAK,EAACC,QAASjB,EAAMkB,OAA/C,8B,QCgFGC,E,qLAlGEC,GACXC,KAAKrB,MAAMsB,SAASF,EAAEf,OAAOkB,KAAMH,EAAEf,OAAOmB,S,+BAI1C,OACI,kBAACvB,EAAA,EAAD,KACE,6CACA,kBAACwB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACpB,kBAACF,EAAA,EAAKG,MAAN,gCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,eAAeQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE3F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,mCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,iBAAiBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE7F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,kDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,aAAaQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAEzF,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACpB,kBAACF,EAAA,EAAKG,MAAN,iDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,WAAWQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,QACrF,kBAACI,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,2BAC0B,wCAD1B,0CAIF,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,4BACpB,kBAACF,EAAA,EAAKG,MAAN,wDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOM,GAAG,WAAWb,KAAK,uBAAuBQ,KAAK,QAE3E,kBAACN,EAAA,EAAKC,MAAN,CAAYC,UAAU,wBACpB,kBAACF,EAAA,EAAKG,MAAN,kDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,mBAAmBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE/F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,4DACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,iBAAiBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE7F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACF,EAAA,EAAKG,MAAN,0CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,SAASQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,QACnF,kBAACI,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,wBAIF,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBACpB,kBAACF,EAAA,EAAKG,MAAN,uIACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,kBAAkBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE9F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,+CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,iBAAiBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,QAC3F,kBAACI,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,mCAIF,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBACpB,kBAACF,EAAA,EAAKG,MAAN,6CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,eAAeQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,QACzF,kBAACI,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,gBAIF,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBACpB,kBAACF,EAAA,EAAKG,MAAN,oDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,YAAYQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAExF,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,kBAACF,EAAA,EAAKG,MAAN,kDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,gBAAgBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE5F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,kBAACF,EAAA,EAAKG,MAAN,+CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,gBAAgBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE5F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,wCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,iBAAiBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,QAC3F,kBAACI,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,wBAIF,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,kCACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,aAAaQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAEzF,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,4CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,cAAcQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,e,GA3F/EgB,IAAMC,WC4ClBnB,E,qLA3CAC,GACXC,KAAKrB,MAAMsB,SAASF,EAAEf,OAAOkB,KAAMH,EAAEf,OAAOmB,S,+BAIxC,OACI,kBAACvB,EAAA,EAAD,KACE,2CACA,kBAACwB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,kBAACF,EAAA,EAAKG,MAAN,4CACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,gBAAgBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE5F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,EAAA,EAAKG,MAAN,yEACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,cAAcQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE1F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,0EACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,aAAaQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAEzF,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,4EACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,iBAAiBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE7F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,wBACpB,kBAACF,EAAA,EAAKG,MAAN,0FACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,mBAAmBQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,SAE/F,kBAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,yBACpB,kBAACF,EAAA,EAAKG,MAAN,uEACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOM,GAAG,WAAWb,KAAK,oBAAoBQ,KAAK,QAExE,kBAACN,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,kDACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOP,KAAK,aAAaQ,KAAK,KAAKT,SAAUD,KAAKW,aAAaC,KAAKZ,e,GApC9EgB,IAAMC,WCiClBC,EAXiB,SAACC,GAAD,MAAY,CACxCC,WAAYD,EAAME,GAAK,EACvBC,UAAwB,IAAbH,EAAMI,GACjBC,UAAwB,IAAbL,EAAMM,GACjBC,UAAwB,IAAbP,EAAMM,GACjBE,iBAA+B,IAAbR,EAAMM,GACxBG,QAAuB,KAAdT,EAAMU,IACfC,cAA8B,KAAfX,EAAMY,KACrBC,UApCqBC,EAoCKd,EAAMe,IAnCf,IAAbD,EACO,SAGPA,GAAY,EACL,eAGPA,GAAY,GACL,QAGPA,GAAY,GACL,MAGPA,GAAY,GACL,OAGPA,GAAY,GACL,UAGJ,YAzBa,IAACA,G,QCkFnBE,EAAa,CACf,OAnFqB,SAACC,GAAD,MAAa,CAACA,EAAQC,eAoF3C,aAlF2B,SAACD,EAASE,GAQrC,MAAO,CAPY,CACfF,EAAQG,YACRH,EAAQI,OACRJ,EAAQK,eACRL,EAAQM,uBAGOJ,EAAW,GAAI,IAAKF,EAAQO,aA2E/C,MAxEoB,SAACP,EAASE,GAQ9B,MAAO,CAPY,CACfF,EAAQQ,cACR,QACAR,EAAQI,OACRJ,EAAQS,YAGOP,EAAW,GAAI,IAAKF,EAAQU,WAiE/C,IA9DkB,SAACV,EAASE,GAQ5B,MAAO,CAAC,OAPI,CACRF,EAAQW,eACRX,EAAQY,aACRZ,EAAQa,iBACRb,EAAQc,kBAGUZ,EAAW,KAuDjC,KApDmB,SAACF,EAASE,GAC7B,IAAIa,EAAQ,CACRf,EAAQgB,YACRhB,EAAQiB,WACRjB,EAAQkB,eACRlB,EAAQI,OACRJ,EAAQW,eACRX,EAAQK,gBAGZ,MAAO,CAACL,EAAQmB,WAAY,IAAKJ,EAAMb,EAAW,KA2ClD,QAxCsB,SAACF,EAASE,GAQhC,MAAO,CAPK,CACRF,EAAQkB,eACRlB,EAAQQ,cACRR,EAAQc,iBACRd,EAAQY,cAGEV,EAAW,GAAI,IAAKF,EAAQoB,iBAiC1C,QA9B+B,SAACpB,GAAD,MAAa,CAACA,EAAQqB,aA2C1CC,EAVY,SAACtB,EAASuB,EAAYrB,GAAc,IAAD,EAC1D,GAAIqB,EAAW7B,cACX,MAAO,eAGX,IAAM5B,EAAOiC,EAAWwB,EAAW3B,UAAUI,EAASE,GAEtD,OAAO,MAAGsB,OAAH,oBAtCW,SAACC,EAAWzB,EAASuB,GACvC,IAK0B,EAIA,EAIO,EAb7BG,EAAYD,EAAUE,SACtBJ,EAAWrC,YACXwC,EAAYA,EAAUF,OAAO,QAG7BD,EAAWjC,aACXoC,GAAY,GAAC,SAAQF,OAAT,oBAAmBE,KAG/BH,EAAWnC,YACXsC,GAAY,GAAC,SAAQF,OAAT,oBAAmBE,KAG/BH,EAAWhC,mBACXmC,GAAY,GAAC1B,EAAQ4B,cAAe,MAAKJ,OAA7B,oBAAuCE,KAGvD,OAAOA,EAoBaG,CAAc/D,EAAMkC,EAASuB,M,6jBCWtCO,E,YAjGb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,UAAU,EACVhC,QAAS,CAEPC,aAAc,eACdM,WAAY,cACZG,SAAU,SACVG,iBAAkB,mBAClBO,eAAgB,QAChBhB,OAAQ,YACRO,eAAgB,QAChBC,aAAc,UACdS,UAAW,YACXO,cAAe,QACfpB,cAAe,SACfH,eAAgB,OAChBI,WAAY,SACZN,YAAa,OAEbG,sBAAuB,gBACvBU,YAAa,SACbC,WAAY,WACZC,eAAgB,UAChBJ,iBAAkB,cAClBK,WAAY,WAEdI,WAAY,IA7BF,E,qEAkCZ3D,KAAKqE,SAAS,CAAED,UAAU,M,iCAGjBE,EAAWC,GACpBvE,KAAKqE,UAAS,SAACF,GAAD,MAAY,CACxB/B,QAAQ,EAAD,GAAO+B,EAAM/B,QAAb,eAAuBkC,EAAYC,U,+BAIrCC,GACP,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAAa,I,qCAI1D,IAAMrD,EAAQ,CACVI,GAAIvB,KAAK4E,SAAS,GAClBvD,GAAIrB,KAAK4E,SAAS,GAClBnD,GAAIzB,KAAK4E,SAAS,GAClB/C,IAAK7B,KAAK4E,SAAS,IACnB1C,IAAKlC,KAAK4E,SAAS,IACnB7C,KAAM/B,KAAK4E,SAAS,MAElBjB,EAAazC,EAAwBC,GACrC0D,EAAa7E,KAAK4E,SAAiC,SAAxBjB,EAAW3B,SAAsB,EAAI,GAEtEhC,KAAKqE,SAAS,CACZS,WAAYpB,EAAmB1D,KAAKmE,MAAM/B,QAASuB,EAAYkB,GAC/DT,UAAU,EACVT,WAAYA,M,+BAKd,OACE,oCACA,kBAACoB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAOlF,MAAOG,KAAKH,MAAMe,KAAKZ,SAEhC,kBAAC+E,EAAA,EAAD,CAAWjE,UAAWd,KAAKmE,MAAMC,SAAW,UAAY,aACtD,kBAACvF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAcmB,SAAUD,KAAKgF,WAAWpE,KAAKZ,SAE/C,kBAAClB,EAAA,EAAD,KACE,kBAACmG,EAAD,CAAYhF,SAAUD,KAAKgF,WAAWpE,KAAKZ,UAG/C,kBAACnB,EAAA,EAAD,KACE,kBAACY,EAAA,EAAD,CAAQE,OAAK,EAACD,QAAQ,UAAUE,QAASI,KAAKkF,aAAatE,KAAKZ,OAAhE,sBAGJ,kBAAC+E,EAAA,EAAD,CAAWjE,UAAWd,KAAKmE,MAAMW,WAAa,UAAY,aACxD,kBAAClG,EAAA,EAAD,KACE,mDAAyBoB,KAAKmE,MAAMW,YACpC,2CAAgB,gCAAS9E,KAAKmE,MAAMR,WAAW3B,UAA/C,mDACA,sCAAYhC,KAAKmE,MAAMW,WAAvB,+E,GA1FQ9D,IAAMC,WCAJkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9693c88c.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Jumbotron,\n  Button,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nconst Intro = (props) => {\n    return (\n        <Jumbotron>\n            <Row>\n                <Col>\n                    <h1>Kojima Name Generator</h1>\n                    <p>\n                    This is a small app based on the formula created by Brian David Gilbert from Polygon,\n                    which allows us to create our Hideo Kojima name. You can see the formula in <a href=\"https://www.polygon.com/videos/2019/11/11/20959269/unraveled-kojima-name-generator-death-stranding\" target=\"_blank\" rel=\"noopener noreferrer\">this article</a> or watch the video ->\n                    </p>\n                </Col>\n                <Col>\n                    <p>\n                        <iframe title=\"video\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/t-3i6GBYvdw\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                    </p>\n                </Col>\n            </Row>\n            <Button variant=\"primary\" block onClick={props.start}>Discover my Kojima Name</Button>\n        </Jumbotron>\n    );\n};\n\nexport default Intro;\n","import React from 'react';\nimport {\n  Jumbotron,\n  Form,\n} from 'react-bootstrap';\n\nclass PersonalData extends React.Component {\n    handleChange(e) {\n      this.props.onChange(e.target.name, e.target.value);\n    }\n\n    render() {\n        return (\n            <Jumbotron>\n              <h2>Personal Data</h2>\n              <Form>\n                <Form.Group controlId=\"formName\">\n                  <Form.Label>What is your full name?</Form.Label>\n                  <Form.Control type=\"text\" name=\"originalName\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProfessionFull\">\n                  <Form.Label>What do you do for living?</Form.Label>\n                  <Form.Control type=\"text\" name=\"professionFull\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProfession\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"profession\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formFirstPet\">\n                  <Form.Label>What is your first pet species or breed?</Form.Label>\n                  <Form.Control type=\"text\" name=\"firstPet\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    If you never had a pet, <s>I'm sorry</s> inform an animal you wish you owned.\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formEmbarassingStoryFull\">\n                  <Form.Label>What is your most embarassing childhood memory?</Form.Label>\n                  <Form.Control type=\"text\" as=\"textarea\" name=\"embarassingStoryFull\" size=\"sm\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formEmbarassingStory\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"embarassingStory\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStabbingObject\">\n                  <Form.Label>What object you would least liked to be stabbed by?</Form.Label>\n                  <Form.Control type=\"text\" name=\"stabbingObject\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formGoodAt\">\n                  <Form.Label>What is something you're goot at?</Form.Label>\n                  <Form.Control type=\"text\" name=\"goodAt\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Verb ending in -ing\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formNumberOfCarrots\">\n                  <Form.Label>How many carrots do you believe you could eat in one sitting, if someone, like, forced you to eat as many carrots as possible?</Form.Label>\n                  <Form.Control type=\"text\" name=\"numberOfCarrots\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formIntangibleFear\">\n                  <Form.Label>What is your greatest intangible fear?</Form.Label>\n                  <Form.Control type=\"text\" name=\"intangibleFear\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like fear, death, fear itself.\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formTangibleFear\">\n                  <Form.Label>What is your greatest tangible fear?</Form.Label>\n                  <Form.Control type=\"text\" name=\"tangibleFear\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like horses\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formLastThing\">\n                  <Form.Label>What is the last thing you did before this?</Form.Label>\n                  <Form.Control type=\"text\" name=\"lastThing\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formBodyCondition\">\n                  <Form.Label>What condition is your body currently in?</Form.Label>\n                  <Form.Control type=\"text\" name=\"bodyCondition\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formBodyCondition\">\n                  <Form.Label>What is your favorite state of matter?</Form.Label>\n                  <Form.Control type=\"text\" name=\"stateOfMatter\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formNameSoundsLike\">\n                  <Form.Label>What does your name sound like?</Form.Label>\n                  <Form.Control type=\"text\" name=\"nameSoundsLike\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like Brian -> Brain\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formZodiacSign\">\n                  <Form.Label>What is your Zodiac Sign?</Form.Label>\n                  <Form.Control type=\"text\" name=\"zodiacSign\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formPersonality\">\n                  <Form.Label>Define your personality in one word</Form.Label>\n                  <Form.Control type=\"text\" name=\"personality\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n              </Form>\n            </Jumbotron>\n        );\n    }\n};\n\nexport default PersonalData;\n","import React from 'react';\nimport {\n  Jumbotron,\n  Form,\n} from 'react-bootstrap';\n\nclass PersonalData extends React.Component {\n  handleChange(e) {\n    this.props.onChange(e.target.name, e.target.value);\n  }\n\n    render() {\n        return (\n            <Jumbotron>\n              <h2>Kojima Data</h2>\n              <Form>\n                <Form.Group controlId=\"formFilmCharacter\">\n                  <Form.Label>What's your favorite film character</Form.Label>\n                  <Form.Control type=\"text\" name=\"filmCharacter\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formLastKubruck\">\n                  <Form.Label>What's the last word of the title of your favorite Kubrick film?</Form.Label>\n                  <Form.Control type=\"text\" name=\"lastKubrick\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMusicAlbum\">\n                  <Form.Label>What is the first word in the title of your favorite music album?</Form.Label>\n                  <Form.Control type=\"text\" name=\"musicAlbum\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formScientificTerm\">\n                  <Form.Label>What is a scientific term you picked up from listening to NPR once?</Form.Label>\n                  <Form.Control type=\"text\" name=\"scientificTerm\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMilitaryHardware\">\n                  <Form.Label>What is a piece of military hardware you think looks cool even though war is bad?</Form.Label>\n                  <Form.Control type=\"text\" name=\"militaryHardware\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMadsMikkelsenFull\">\n                  <Form.Label>What is something you’d enjoy watching Mads Mikkelsen do?</Form.Label>\n                  <Form.Control type=\"text\" as=\"textarea\" name=\"madsMikkelsenFull\" size=\"sm\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formMadsAction\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"madsAction\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n              </Form>\n            </Jumbotron>\n        );\n    }\n};\n\nexport default PersonalData;\n","const getNameCategory = (d20Value) => {\n    if (d20Value === 1) {\n        return \"NORMAL\";\n    }\n\n    if (d20Value <= 6) {\n        return \"OCCUPATIONAL\";\n    }\n\n    if (d20Value <= 10) {\n        return \"HORNY\";\n    }\n\n    if (d20Value <= 13) {\n        return \"THE\";\n    }\n\n    if (d20Value <= 17) {\n        return \"COOL\";\n    }\n\n    if (d20Value <= 19) {\n        return \"VIOLENT\";\n    }\n\n    return \"SUBTEXT\";\n};\n\nconst determineNameConditions = (dices) => ({\n    hasOneName: dices.d6 < 6,\n    hasTheMan: dices.d4 === 4,\n    hasBigMan: dices.d8 === 6,\n    hasOldMan: dices.d8 === 7,\n    hasBodyCondition: dices.d8 === 8,\n    isClone: dices.d12 === 12,\n    isHideoKojima: dices.d100 === 69,\n    category: getNameCategory(dices.d20),\n});\n\nexport default determineNameConditions;","const createNormalName = (answers) => [answers.originalName];\n\nconst createOccupationalName = (answers, diceRoll) => {\n    const firstNames = [\n        answers.personality,\n        answers.goodAt,\n        answers.nameSoundsLike,\n        answers.favoriteFilmCharacter,\n    ]\n\n    return [firstNames[diceRoll - 1], \" \", answers.profession];\n};\n\nconst createHornyName = (answers, diceRoll) => {\n    const firstNames = [\n        answers.stateOfMatter,\n        \"Naked\",\n        answers.goodAt,\n        answers.zodiacSign,\n    ];\n\n    return [firstNames[diceRoll - 1], \" \", answers.firstPet];\n};\n\nconst createTheName = (answers, diceRoll) => {\n    let names = [\n        answers.intangibleFear,\n        answers.tangibleFear,\n        answers.embarassingStory,\n        answers.militaryHardware,\n    ];\n\n    return [\"The \", names[diceRoll - 1]];\n};\n\nconst createCoolName = (answers, diceRoll) => {\n    let names = [\n        answers.kubrickWord,\n        answers.musicAlbum,\n        answers.scientificTerm,\n        answers.goodAt,\n        answers.intangibleFear,\n        answers.nameSoundsLike,\n    ];\n\n    return [answers.madsAction, \" \", names[diceRoll - 1]];\n};\n\nconst createViolentName = (answers, diceRoll) => {\n    let names = [\n        answers.scientificTerm,\n        answers.stateOfMatter,\n        answers.militaryHardware,\n        answers.tangibleFear,\n    ];\n\n    return [names[diceRoll - 1], \" \", answers.stabbingObject];\n};\n\nconst createNameThatLacksSubtext = (answers) => [answers.lastThing];\n\nconst addConditions = (nameParts, answers, conditions) => {\n    let finalName = nameParts.slice();\n    if (conditions.hasTheMan) {\n        finalName = finalName.concat(\"man\");\n    }\n\n    if (conditions.hasOldMan) {\n        finalName = [\"Old \"].concat(...finalName);\n    }\n\n    if (conditions.hasBigMan) {\n        finalName = [\"Big \"].concat(...finalName);\n    }\n\n    if (conditions.hasBodyCondition) {\n        finalName = [answers.bodyCondition, \" \"].concat(...finalName);\n    }\n\n    return finalName;\n};\n\nconst categories = {\n    \"NORMAL\": createNormalName,\n    \"OCCUPATIONAL\": createOccupationalName,\n    \"HORNY\": createHornyName,\n    \"THE\": createTheName,\n    \"COOL\": createCoolName,\n    \"VIOLENT\": createViolentName,\n    \"SUBTEXT\": createNameThatLacksSubtext\n};\n\nconst generateKojimaName = (answers, conditions, diceRoll) => {\n    if (conditions.isHideoKojima) {\n        return \"Hideo Kojima\";\n    }\n\n    const name = categories[conditions.category](answers, diceRoll);\n\n    return \"\".concat(...addConditions(name, answers, conditions));\n};\n\nexport default generateKojimaName;","import React from 'react';\nimport {\n  Container,\n  Button,\n  Row,\n  Col,\n  Jumbotron,\n} from 'react-bootstrap';\nimport './App.css';\nimport { Intro, PersonalData, KojimaData } from './components';\nimport { determineNameConditions, generateKojimaName } from './engine';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showForm: false,\n      answers: {\n        // Personal Data\n        originalName: \"Pedro Chaves\",\n        profession: \"Programming\",\n        firstPet: \"Poodle\",\n        embarassingStory: \"Birthday Yelling\",\n        stabbingObject: \"Knife\",\n        goodAt: \"Computing\",\n        intangibleFear: \"Death\",\n        tangibleFear: \"Falling\",\n        lastThing: \"Breakfast\",\n        bodyCondition: \"Tired\",\n        stateOfMatter: \"Liquid\",\n        nameSoundsLike: \"Rock\",\n        zodiacSign: \"Cancer\",\n        personality: \"Calm\",\n        // Kojima Data\n        favoriteFilmCharacter: \"Scott Pilgrim\",\n        kubrickWord: \"Orange\",\n        musicAlbum: \"American\",\n        scientificTerm: \"Quantic\",\n        militaryHardware: \"Machineguns\",\n        madsAction: \"Cooking\",\n      },\n      conditions: {}\n    };\n  }\n\n  start() {\n    this.setState({ showForm: true });\n  }\n\n  saveAnswer(answerKey, answerValue) {\n    this.setState((state) => ({\n      answers: { ...state.answers, [answerKey]: answerValue }\n    }));\n  }\n\n  rollDice(diceSize) {\n    return Math.floor(Math.random() * Math.floor(diceSize)) + 1;\n  }\n\n  discoverName() {\n    const dices = {\n        d4: this.rollDice(4),\n        d6: this.rollDice(6),\n        d8: this.rollDice(8),\n        d12: this.rollDice(12),\n        d20: this.rollDice(20),\n        d100: this.rollDice(100),\n    };\n    const conditions = determineNameConditions(dices);\n    const randomDice = this.rollDice(conditions.category === \"COOL\" ? 6 : 4);\n\n    this.setState({\n      kojimaName: generateKojimaName(this.state.answers, conditions, randomDice),\n      showForm: false,\n      conditions: conditions,\n    });\n  }\n\n  render() {\n    return (\n      <>\n      <Container>\n        <Intro start={this.start.bind(this)} />\n      </Container>\n      <Container className={this.state.showForm ? 'visible' : 'invisible'}>\n        <Row>\n          <Col>\n            <PersonalData onChange={this.saveAnswer.bind(this)} />\n          </Col>\n          <Col>\n            <KojimaData onChange={this.saveAnswer.bind(this)} />\n          </Col>\n        </Row>\n        <Row>\n          <Button block variant=\"primary\" onClick={this.discoverName.bind(this)}>Discover my name</Button>\n        </Row>\n      </Container>\n      <Container className={this.state.kojimaName ? 'visible' : 'invisible'}>\n        <Jumbotron>\n          <h1>Your Kojima Name is {this.state.kojimaName}</h1>\n          <p>It is in the <strong>{this.state.conditions.category}</strong> category. You can fill in your monologue below</p>\n          <p>Hi, I'm {this.state.kojimaName}, and if you're wondering how I got this name, let me tell you. I...</p>\n        </Jumbotron>\n      </Container>\n      </>\n      );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}