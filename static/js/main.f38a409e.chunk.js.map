{"version":3,"sources":["engine/conditions.js","engine/generator.js","components/App.js","components/Intro.js","components/PersonalData.js","components/KojimaData.js","index.js"],"names":["determineNameConditions","dices","d20Value","category","d20","hasOneName","d6","hasTheMan","d4","hasBigMan","d8","hasOldMan","hasBodyCondition","isClone","d12","isHideoKojima","d100","optionCount","categories","answers","originalName","diceRoll","personality","goodAt","nameSoundsLike","favoriteFilmCharacter","profession","stateOfMatter","zodiacSign","firstPet","intangibleFear","tangibleFear","embarassingStory","militaryHardware","names","kubrickWord","musicAlbum","scientificTerm","madsAction","stabbingObject","lastThing","generateKojimaName","conditions","name","concat","nameParts","finalName","slice","bodyCondition","addConditions","App","state","showForm","this","setState","answerKey","answerValue","diceSize","Math","floor","random","rollDice","randomDice","kojimaName","Container","start","bind","className","Row","Col","onChange","saveAnswer","KojimaData","Button","block","variant","onClick","discoverName","Jumbotron","React","Component","Intro","props","href","target","rel","Alert","title","width","height","src","frameBorder","allow","allowFullScreen","PersonalData","e","value","Form","Group","controlId","Label","Control","type","size","handleChange","Text","as","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f38a409e.chunk.js","sourcesContent":["const getNameCategory = (d20Value) => {\n    if (d20Value === 1) {\n        return \"NORMAL\";\n    }\n\n    if (d20Value <= 6) {\n        return \"OCCUPATIONAL\";\n    }\n\n    if (d20Value <= 10) {\n        return \"HORNY\";\n    }\n\n    if (d20Value <= 13) {\n        return \"THE\";\n    }\n\n    if (d20Value <= 17) {\n        return \"COOL\";\n    }\n\n    if (d20Value <= 19) {\n        return \"VIOLENT\";\n    }\n\n    return \"SUBTEXT\";\n};\n\nconst determineNameConditions = (dices) => {\n    const category = getNameCategory(dices.d20);\n\n    return {\n        hasOneName: dices.d6 < 6,\n        hasTheMan: dices.d4 === 4,\n        hasBigMan: dices.d8 === 6,\n        hasOldMan: dices.d8 === 7,\n        hasBodyCondition: dices.d8 === 8,\n        isClone: dices.d12 === 12,\n        isHideoKojima: dices.d100 === 69,\n        category: category,\n        optionCount: category === \"COOL\" ? 6 : 4,\n    };\n};\n\nexport default determineNameConditions;","const createNormalName = (answers) => [answers.originalName];\n\nconst createOccupationalName = (answers, diceRoll) => {\n    const firstNames = [\n        answers.personality,\n        answers.goodAt,\n        answers.nameSoundsLike,\n        answers.favoriteFilmCharacter,\n    ]\n\n    return [firstNames[diceRoll - 1], \" \", answers.profession];\n};\n\nconst createHornyName = (answers, diceRoll) => {\n    const firstNames = [\n        answers.stateOfMatter,\n        \"Naked\",\n        answers.goodAt,\n        answers.zodiacSign,\n    ];\n\n    return [firstNames[diceRoll - 1], \" \", answers.firstPet];\n};\n\nconst createTheName = (answers, diceRoll) => {\n    let names = [\n        answers.intangibleFear,\n        answers.tangibleFear,\n        answers.embarassingStory,\n        answers.militaryHardware,\n    ];\n\n    return [\"The \", names[diceRoll - 1]];\n};\n\nconst createCoolName = (answers, diceRoll) => {\n    let names = [\n        answers.kubrickWord,\n        answers.musicAlbum,\n        answers.scientificTerm,\n        answers.goodAt,\n        answers.intangibleFear,\n        answers.nameSoundsLike,\n    ];\n\n    return [answers.madsAction, \" \", names[diceRoll - 1]];\n};\n\nconst createViolentName = (answers, diceRoll) => {\n    let names = [\n        answers.scientificTerm,\n        answers.stateOfMatter,\n        answers.militaryHardware,\n        answers.tangibleFear,\n    ];\n\n    return [names[diceRoll - 1], \" \", answers.stabbingObject];\n};\n\nconst createNameThatLacksSubtext = (answers) => [answers.lastThing];\n\nconst addConditions = (nameParts, answers, conditions) => {\n    let finalName = nameParts.slice();\n    if (conditions.hasTheMan) {\n        finalName = finalName.concat(\"man\");\n    }\n\n    if (conditions.hasOldMan) {\n        finalName = [\"Old \"].concat(...finalName);\n    }\n\n    if (conditions.hasBigMan) {\n        finalName = [\"Big \"].concat(...finalName);\n    }\n\n    if (conditions.hasBodyCondition) {\n        finalName = [answers.bodyCondition, \" \"].concat(...finalName);\n    }\n\n    return finalName;\n};\n\nconst categories = {\n    \"NORMAL\": createNormalName,\n    \"OCCUPATIONAL\": createOccupationalName,\n    \"HORNY\": createHornyName,\n    \"THE\": createTheName,\n    \"COOL\": createCoolName,\n    \"VIOLENT\": createViolentName,\n    \"SUBTEXT\": createNameThatLacksSubtext\n};\n\nconst generateKojimaName = (answers, conditions, diceRoll) => {\n    if (conditions.isHideoKojima) {\n        return \"Hideo Kojima\";\n    }\n\n    const name = categories[conditions.category](answers, diceRoll);\n\n    return \"\".concat(...addConditions(name, answers, conditions));\n};\n\nexport default generateKojimaName;","import React from 'react';\nimport {\n  Container,\n  Button,\n  Row,\n  Col,\n  Jumbotron,\n} from 'react-bootstrap';\nimport { Intro, PersonalData, KojimaData } from '.';\nimport { determineNameConditions, generateKojimaName } from '../engine';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showForm: false,\n      answers: {\n        // Personal Data\n        originalName: \"\",\n        profession: \"\",\n        firstPet: \"\",\n        embarassingStory: \"\",\n        stabbingObject: \"\",\n        goodAt: \"\",\n        intangibleFear: \"\",\n        tangibleFear: \"\",\n        lastThing: \"\",\n        bodyCondition: \"\",\n        stateOfMatter: \"\",\n        nameSoundsLike: \"\",\n        zodiacSign: \"\",\n        personality: \"\",\n        // Kojima Data\n        favoriteFilmCharacter: \"\",\n        kubrickWord: \"\",\n        musicAlbum: \"\",\n        scientificTerm: \"\",\n        militaryHardware: \"\",\n        madsAction: \"\",\n      },\n      conditions: {}\n    };\n  }\n\n  start() {\n    this.setState({ showForm: true });\n  }\n\n  saveAnswer(answerKey, answerValue) {\n    this.setState((state) => ({\n      answers: { ...state.answers, [answerKey]: answerValue }\n    }));\n  }\n\n  rollDice(diceSize) {\n    return Math.floor(Math.random() * Math.floor(diceSize)) + 1;\n  }\n\n  discoverName() {\n    const dices = {\n        d4: this.rollDice(4),\n        d6: this.rollDice(6),\n        d8: this.rollDice(8),\n        d12: this.rollDice(12),\n        d20: this.rollDice(20),\n        d100: this.rollDice(100),\n    };\n    const conditions = determineNameConditions(dices);\n    const randomDice = this.rollDice(conditions.optionCount);\n\n    this.setState({\n      kojimaName: generateKojimaName(this.state.answers, conditions, randomDice),\n      showForm: false,\n      conditions: conditions,\n    });\n  }\n\n  render() {\n    return (\n      <>\n      <Container>\n        <Intro start={this.start.bind(this)} />\n      </Container>\n      <Container className={this.state.showForm ? 'visible' : 'invisible'}>\n        <Row>\n          <Col>\n            <PersonalData onChange={this.saveAnswer.bind(this)} />\n          </Col>\n          <Col>\n            <KojimaData onChange={this.saveAnswer.bind(this)} />\n          </Col>\n        </Row>\n        <Row>\n          <Button block variant=\"primary\" onClick={this.discoverName.bind(this)}>Discover my name</Button>\n        </Row>\n      </Container>\n      <Container className={this.state.kojimaName ? 'visible' : 'invisible'}>\n        <Jumbotron>\n          <h1>Your Kojima Name is {this.state.kojimaName}</h1>\n          <p>It is in the <strong>{this.state.conditions.category}</strong> category. You can fill in your monologue below</p>\n          <p>Hi, I'm {this.state.kojimaName}, and if you're wondering how I got this name, let me tell you. I...</p>\n        </Jumbotron>\n      </Container>\n      </>\n      );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport {\n    Alert,\n    Jumbotron,\n    Button,\n    Row,\n    Col,\n} from 'react-bootstrap';\n\nconst Intro = (props) => {\n    return (\n        <Jumbotron>\n            <Row>\n                <Col>\n                    <h1>Kojima Name Generator</h1>\n                    <p>\n                    This is a small app based on the formula created by Brian David Gilbert from Polygon,\n                    which allows us to create our Hideo Kojima name.\n                    </p>\n                    <p>\n                    You can see the formula in <a href=\"https://www.polygon.com/videos/2019/11/11/20959269/unraveled-kojima-name-generator-death-stranding\" target=\"_blank\" rel=\"noopener noreferrer\">this article</a> or watch this video right here.\n                    </p>\n                    <Alert variant=\"secondary\">\n                        <p>\n                            This project is not associated with Polygon or Brian David Gilbert by any means. It was made\n                            for fun during the creator's spare time.\n                        </p>\n                        <hr/>\n                        <p>\n                            Absolutely <strong>no personal data</strong> is being collected from you, so you can play around\n                            all you want. If you are still suspicious, you can check out the code on <a href=\"https://github.com/pedrochaves/kojima-name-generator\">GitHub</a> (and collaborate if you want).\n                        </p>\n                    </Alert>\n                </Col>\n                <Col>\n                    <p>\n                        <iframe title=\"video\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/t-3i6GBYvdw\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                    </p>\n                </Col>\n            </Row>\n            <Button variant=\"primary\" block onClick={props.start}>Discover my Kojima Name</Button>\n        </Jumbotron>\n    );\n};\n\nexport default Intro;\n","import React from 'react';\nimport {\n  Jumbotron,\n  Form,\n} from 'react-bootstrap';\n\nclass PersonalData extends React.Component {\n    handleChange(e) {\n      this.props.onChange(e.target.name, e.target.value);\n    }\n\n    render() {\n        return (\n            <Jumbotron>\n              <h2>Personal Data</h2>\n              <Form>\n                <Form.Group controlId=\"formName\">\n                  <Form.Label>What is your full name?</Form.Label>\n                  <Form.Control type=\"text\" name=\"originalName\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProfessionFull\">\n                  <Form.Label>What do you do for living?</Form.Label>\n                  <Form.Control type=\"text\" name=\"professionFull\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProfession\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"profession\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formFirstPet\">\n                  <Form.Label>What is your first pet species or breed?</Form.Label>\n                  <Form.Control type=\"text\" name=\"firstPet\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    If you never had a pet, <s>I'm sorry</s> inform an animal you wish you owned.\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formEmbarassingStoryFull\">\n                  <Form.Label>What is your most embarassing childhood memory?</Form.Label>\n                  <Form.Control type=\"text\" as=\"textarea\" name=\"embarassingStoryFull\" size=\"sm\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formEmbarassingStory\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"embarassingStory\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStabbingObject\">\n                  <Form.Label>What object you would least liked to be stabbed by?</Form.Label>\n                  <Form.Control type=\"text\" name=\"stabbingObject\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formGoodAt\">\n                  <Form.Label>What is something you're goot at?</Form.Label>\n                  <Form.Control type=\"text\" name=\"goodAt\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Verb ending in -ing\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formNumberOfCarrots\">\n                  <Form.Label>How many carrots do you believe you could eat in one sitting, if someone, like, forced you to eat as many carrots as possible?</Form.Label>\n                  <Form.Control type=\"text\" name=\"numberOfCarrots\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formIntangibleFear\">\n                  <Form.Label>What is your greatest intangible fear?</Form.Label>\n                  <Form.Control type=\"text\" name=\"intangibleFear\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like fear, death, fear itself.\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formTangibleFear\">\n                  <Form.Label>What is your greatest tangible fear?</Form.Label>\n                  <Form.Control type=\"text\" name=\"tangibleFear\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like horses\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formLastThing\">\n                  <Form.Label>What is the last thing you did before this?</Form.Label>\n                  <Form.Control type=\"text\" name=\"lastThing\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formBodyCondition\">\n                  <Form.Label>What condition is your body currently in?</Form.Label>\n                  <Form.Control type=\"text\" name=\"bodyCondition\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formBodyCondition\">\n                  <Form.Label>What is your favorite state of matter?</Form.Label>\n                  <Form.Control type=\"text\" name=\"stateOfMatter\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formNameSoundsLike\">\n                  <Form.Label>What does your name sound like?</Form.Label>\n                  <Form.Control type=\"text\" name=\"nameSoundsLike\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                  <Form.Text className=\"text-muted\">\n                    Like Brian -> Brain\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formZodiacSign\">\n                  <Form.Label>What is your Zodiac Sign?</Form.Label>\n                  <Form.Control type=\"text\" name=\"zodiacSign\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formPersonality\">\n                  <Form.Label>Define your personality in one word</Form.Label>\n                  <Form.Control type=\"text\" name=\"personality\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n              </Form>\n            </Jumbotron>\n        );\n    }\n};\n\nexport default PersonalData;\n","import React from 'react';\nimport {\n  Jumbotron,\n  Form,\n} from 'react-bootstrap';\n\nclass PersonalData extends React.Component {\n  handleChange(e) {\n    this.props.onChange(e.target.name, e.target.value);\n  }\n\n    render() {\n        return (\n            <Jumbotron>\n              <h2>Kojima Data</h2>\n              <Form>\n                <Form.Group controlId=\"formFilmCharacter\">\n                  <Form.Label>What's your favorite film character</Form.Label>\n                  <Form.Control type=\"text\" name=\"filmCharacter\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formLastKubruck\">\n                  <Form.Label>What's the last word of the title of your favorite Kubrick film?</Form.Label>\n                  <Form.Control type=\"text\" name=\"lastKubrick\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMusicAlbum\">\n                  <Form.Label>What is the first word in the title of your favorite music album?</Form.Label>\n                  <Form.Control type=\"text\" name=\"musicAlbum\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formScientificTerm\">\n                  <Form.Label>What is a scientific term you picked up from listening to NPR once?</Form.Label>\n                  <Form.Control type=\"text\" name=\"scientificTerm\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMilitaryHardware\">\n                  <Form.Label>What is a piece of military hardware you think looks cool even though war is bad?</Form.Label>\n                  <Form.Control type=\"text\" name=\"militaryHardware\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n                <Form.Group controlId=\"formMadsMikkelsenFull\">\n                  <Form.Label>What is something you’d enjoy watching Mads Mikkelsen do?</Form.Label>\n                  <Form.Control type=\"text\" as=\"textarea\" name=\"madsMikkelsenFull\" size=\"sm\"/>\n                </Form.Group>\n                <Form.Group controlId=\"formMadsAction\">\n                  <Form.Label>Condense the previous answer in two words</Form.Label>\n                  <Form.Control type=\"text\" name=\"madsAction\" size=\"sm\" onChange={this.handleChange.bind(this)}/>\n                </Form.Group>\n              </Form>\n            </Jumbotron>\n        );\n    }\n};\n\nexport default PersonalData;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}